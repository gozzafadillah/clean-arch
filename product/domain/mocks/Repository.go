// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	productDomain "github.com/gozzafadillah/product/domain"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Destroy provides a mock function with given fields: id
func (_m *Repository) Destroy(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: id
func (_m *Repository) GetById(id int) (productDomain.Product, error) {
	ret := _m.Called(id)

	var r0 productDomain.Product
	if rf, ok := ret.Get(0).(func(int) productDomain.Product); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(productDomain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByNameCategory provides a mock function with given fields: name
func (_m *Repository) GetByNameCategory(name string) ([]productDomain.Product, error) {
	ret := _m.Called(name)

	var r0 []productDomain.Product
	if rf, ok := ret.Get(0).(func(string) []productDomain.Product); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]productDomain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoryById provides a mock function with given fields: id
func (_m *Repository) GetCategoryById(id int) (productDomain.Category, error) {
	ret := _m.Called(id)

	var r0 productDomain.Category
	if rf, ok := ret.Get(0).(func(int) productDomain.Category); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(productDomain.Category)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields:
func (_m *Repository) GetProducts() ([]productDomain.Product, error) {
	ret := _m.Called()

	var r0 []productDomain.Product
	if rf, ok := ret.Get(0).(func() []productDomain.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]productDomain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveCategory provides a mock function with given fields: domain
func (_m *Repository) SaveCategory(domain productDomain.Category) (int, error) {
	ret := _m.Called(domain)

	var r0 int
	if rf, ok := ret.Get(0).(func(productDomain.Category) int); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(productDomain.Category) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveProduct provides a mock function with given fields: domain
func (_m *Repository) SaveProduct(domain productDomain.Product) (int, error) {
	ret := _m.Called(domain)

	var r0 int
	if rf, ok := ret.Get(0).(func(productDomain.Product) int); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(productDomain.Product) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, domain
func (_m *Repository) Update(id int, domain productDomain.Product) error {
	ret := _m.Called(id, domain)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, productDomain.Product) error); ok {
		r0 = rf(id, domain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t testing.TB) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
