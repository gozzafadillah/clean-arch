// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	productDomain "github.com/gozzafadillah/product/domain"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CheckoutProductId provides a mock function with given fields: id
func (_m *Service) CheckoutProductId(id int) (productDomain.Product, error) {
	ret := _m.Called(id)

	var r0 productDomain.Product
	if rf, ok := ret.Get(0).(func(int) productDomain.Product); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(productDomain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCategory provides a mock function with given fields: domain
func (_m *Service) CreateCategory(domain productDomain.Category) (productDomain.Category, error) {
	ret := _m.Called(domain)

	var r0 productDomain.Category
	if rf, ok := ret.Get(0).(func(productDomain.Category) productDomain.Category); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(productDomain.Category)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(productDomain.Category) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProduct provides a mock function with given fields: domain
func (_m *Service) CreateProduct(domain productDomain.Product) (productDomain.Product, error) {
	ret := _m.Called(domain)

	var r0 productDomain.Product
	if rf, ok := ret.Get(0).(func(productDomain.Product) productDomain.Product); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(productDomain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(productDomain.Product) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DestroyProduct provides a mock function with given fields: id
func (_m *Service) DestroyProduct(id int) (productDomain.Product, error) {
	ret := _m.Called(id)

	var r0 productDomain.Product
	if rf, ok := ret.Get(0).(func(int) productDomain.Product); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(productDomain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditProduct provides a mock function with given fields: id, domain
func (_m *Service) EditProduct(id int, domain productDomain.Product) (productDomain.Product, error) {
	ret := _m.Called(id, domain)

	var r0 productDomain.Product
	if rf, ok := ret.Get(0).(func(int, productDomain.Product) productDomain.Product); ok {
		r0 = rf(id, domain)
	} else {
		r0 = ret.Get(0).(productDomain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, productDomain.Product) error); ok {
		r1 = rf(id, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategory provides a mock function with given fields: name
func (_m *Service) GetCategory(name string) ([]productDomain.Product, error) {
	ret := _m.Called(name)

	var r0 []productDomain.Product
	if rf, ok := ret.Get(0).(func(string) []productDomain.Product); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]productDomain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoryById provides a mock function with given fields: id
func (_m *Service) GetCategoryById(id int) (productDomain.Category, error) {
	ret := _m.Called(id)

	var r0 productDomain.Category
	if rf, ok := ret.Get(0).(func(int) productDomain.Category); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(productDomain.Category)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaxPrice provides a mock function with given fields:
func (_m *Service) GetMaxPrice() ([]productDomain.Product, error) {
	ret := _m.Called()

	var r0 []productDomain.Product
	if rf, ok := ret.Get(0).(func() []productDomain.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]productDomain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMinPrice provides a mock function with given fields:
func (_m *Service) GetMinPrice() ([]productDomain.Product, error) {
	ret := _m.Called()

	var r0 []productDomain.Product
	if rf, ok := ret.Get(0).(func() []productDomain.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]productDomain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductId provides a mock function with given fields: id
func (_m *Service) GetProductId(id int) (productDomain.Product, error) {
	ret := _m.Called(id)

	var r0 productDomain.Product
	if rf, ok := ret.Get(0).(func(int) productDomain.Product); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(productDomain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields:
func (_m *Service) GetProducts() ([]productDomain.Product, error) {
	ret := _m.Called()

	var r0 []productDomain.Product
	if rf, ok := ret.Get(0).(func() []productDomain.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]productDomain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t testing.TB) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
