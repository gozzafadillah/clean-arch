// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	productDomain "github.com/gozzafadillah/product/domain"
	mock "github.com/stretchr/testify/mock"

	testing "testing"

	transactionDomain "github.com/gozzafadillah/transaction/domain"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// ChangeStatus provides a mock function with given fields: code
func (_m *Repository) ChangeStatus(code string) error {
	ret := _m.Called(code)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckCourier provides a mock function with given fields: origin, cityDest, weight, courier, paket
func (_m *Repository) CheckCourier(origin int, cityDest int, weight int, courier string, paket string) bool {
	ret := _m.Called(origin, cityDest, weight, courier, paket)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int, int, string, string) bool); ok {
		r0 = rf(origin, cityDest, weight, courier, paket)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetCheckoutCode provides a mock function with given fields: code
func (_m *Repository) GetCheckoutCode(code string) (transactionDomain.Checkout, error) {
	ret := _m.Called(code)

	var r0 transactionDomain.Checkout
	if rf, ok := ret.Get(0).(func(string) transactionDomain.Checkout); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Get(0).(transactionDomain.Checkout)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckoutId provides a mock function with given fields: id
func (_m *Repository) GetCheckoutId(id int) (transactionDomain.Checkout, error) {
	ret := _m.Called(id)

	var r0 transactionDomain.Checkout
	if rf, ok := ret.Get(0).(func(int) transactionDomain.Checkout); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(transactionDomain.Checkout)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCityId provides a mock function with given fields: name
func (_m *Repository) GetCityId(name string) (int, error) {
	ret := _m.Called(name)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCode provides a mock function with given fields: code
func (_m *Repository) GetCode(code string) (transactionDomain.Transaction, error) {
	ret := _m.Called(code)

	var r0 transactionDomain.Transaction
	if rf, ok := ret.Get(0).(func(string) transactionDomain.Transaction); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Get(0).(transactionDomain.Transaction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: id
func (_m *Repository) GetTransaction(id int) (transactionDomain.Transaction, error) {
	ret := _m.Called(id)

	var r0 transactionDomain.Transaction
	if rf, ok := ret.Get(0).(func(int) transactionDomain.Transaction); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(transactionDomain.Transaction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ongkir provides a mock function with given fields: origin, cityDest, weight, courier
func (_m *Repository) Ongkir(origin int, cityDest int, weight int, courier string) (transactionDomain.Ongkir, error) {
	ret := _m.Called(origin, cityDest, weight, courier)

	var r0 transactionDomain.Ongkir
	if rf, ok := ret.Get(0).(func(int, int, int, string) transactionDomain.Ongkir); ok {
		r0 = rf(origin, cityDest, weight, courier)
	} else {
		r0 = ret.Get(0).(transactionDomain.Ongkir)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int, string) error); ok {
		r1 = rf(origin, cityDest, weight, courier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveCheckout provides a mock function with given fields: domainCheckout, domain, code, ongkir, etd
func (_m *Repository) SaveCheckout(domainCheckout transactionDomain.Checkout, domain productDomain.Product, code string, ongkir int, etd string) (int, error) {
	ret := _m.Called(domainCheckout, domain, code, ongkir, etd)

	var r0 int
	if rf, ok := ret.Get(0).(func(transactionDomain.Checkout, productDomain.Product, string, int, string) int); ok {
		r0 = rf(domainCheckout, domain, code, ongkir, etd)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(transactionDomain.Checkout, productDomain.Product, string, int, string) error); ok {
		r1 = rf(domainCheckout, domain, code, ongkir, etd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveTransaction provides a mock function with given fields: code, idUser, ongkir, etd, checkout
func (_m *Repository) SaveTransaction(code string, idUser int, ongkir int, etd string, checkout transactionDomain.Checkout) (int, error) {
	ret := _m.Called(code, idUser, ongkir, etd, checkout)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, int, int, string, transactionDomain.Checkout) int); ok {
		r0 = rf(code, idUser, ongkir, etd, checkout)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int, string, transactionDomain.Checkout) error); ok {
		r1 = rf(code, idUser, ongkir, etd, checkout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQty provides a mock function with given fields: id, qty
func (_m *Repository) UpdateQty(id int, qty int) error {
	ret := _m.Called(id, qty)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id, qty)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t testing.TB) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
