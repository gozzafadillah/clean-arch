// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	productDomain "github.com/gozzafadillah/product/domain"
	mock "github.com/stretchr/testify/mock"

	testing "testing"

	transactionDomain "github.com/gozzafadillah/transaction/domain"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// ChangeStatus provides a mock function with given fields: code
func (_m *Service) ChangeStatus(code string) error {
	ret := _m.Called(code)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckCity provides a mock function with given fields: city
func (_m *Service) CheckCity(city string) (int, error) {
	ret := _m.Called(city)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(city)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(city)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCheckout provides a mock function with given fields: code, domainCheckout, domain, ongkir, etd
func (_m *Service) CreateCheckout(code string, domainCheckout transactionDomain.Checkout, domain productDomain.Product, ongkir int, etd string) (transactionDomain.Checkout, error) {
	ret := _m.Called(code, domainCheckout, domain, ongkir, etd)

	var r0 transactionDomain.Checkout
	if rf, ok := ret.Get(0).(func(string, transactionDomain.Checkout, productDomain.Product, int, string) transactionDomain.Checkout); ok {
		r0 = rf(code, domainCheckout, domain, ongkir, etd)
	} else {
		r0 = ret.Get(0).(transactionDomain.Checkout)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, transactionDomain.Checkout, productDomain.Product, int, string) error); ok {
		r1 = rf(code, domainCheckout, domain, ongkir, etd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransaction provides a mock function with given fields: idUser, code, ongkir, etd, checkout
func (_m *Service) CreateTransaction(idUser int, code string, ongkir int, etd string, checkout transactionDomain.Checkout) (transactionDomain.Transaction, error) {
	ret := _m.Called(idUser, code, ongkir, etd, checkout)

	var r0 transactionDomain.Transaction
	if rf, ok := ret.Get(0).(func(int, string, int, string, transactionDomain.Checkout) transactionDomain.Transaction); ok {
		r0 = rf(idUser, code, ongkir, etd, checkout)
	} else {
		r0 = ret.Get(0).(transactionDomain.Transaction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, int, string, transactionDomain.Checkout) error); ok {
		r1 = rf(idUser, code, ongkir, etd, checkout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}


// GetCheckout provides a mock function with given fields: code
func (_m *Service) GetCheckout(code string) (transactionDomain.Checkout, error) {
	ret := _m.Called(code)

	var r0 transactionDomain.Checkout
	if rf, ok := ret.Get(0).(func(string) transactionDomain.Checkout); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Get(0).(transactionDomain.Checkout)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCode provides a mock function with given fields:
func (_m *Service) GetCode() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// KalkulationWeight provides a mock function with given fields: productWeight, requestQty
func (_m *Service) KalkulationWeight(productWeight int, requestQty int) int {
	ret := _m.Called(productWeight, requestQty)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(productWeight, requestQty)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Ongkir provides a mock function with given fields: origin, dest, weight, courier, paket
func (_m *Service) Ongkir(origin int, dest int, weight int, courier string, paket string) (int, string, error) {
	ret := _m.Called(origin, dest, weight, courier, paket)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int, int, string, string) int); ok {
		r0 = rf(origin, dest, weight, courier, paket)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(int, int, int, string, string) string); ok {
		r1 = rf(origin, dest, weight, courier, paket)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int, int, string, string) error); ok {
		r2 = rf(origin, dest, weight, courier, paket)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateStok provides a mock function with given fields: id, qty
func (_m *Service) UpdateStok(id int, qty int) error {
	ret := _m.Called(id, qty)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id, qty)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t testing.TB) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
